# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BatterCreateInput {
  atBats: Float = 0
  firstName: String
  hits: Float = 0
  lastName: String
  playerNumber: Float
  position: String
  rbis: Float = 0
  runs: Float = 0
  scorecardId: Float!
  team: String
}

type BatterEntry {
  atBats: Float!
  firstName: String!
  hits: Float!
  id: Float!
  lastName: String!
  offenseEntry: [OffenseEntry!]!
  playerNumber: Float!
  position: String!
  rbis: Float!
  runs: Float!
  scorecardId: Float!
  team: String!
}

input BatterUpdateInput {
  atBats: Float = 0
  firstName: String
  hits: Float = 0
  id: Float!
  lastName: String
  playerNumber: Float
  position: String
  rbis: Float = 0
  runs: Float = 0
  scorecardId: Float!
  team: String
}

type CatcherEntry {
  firstName: String!
  id: Float!
  lastName: String!
  pb: Float!
  playerNumber: Float!
  scorecardId: Float!
  team: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Mutation {
  createBatterEntry(data: BatterCreateInput!): BatterEntry!
  createScorecard(data: ScorecardInput!): Scorecard!
  createUser(data: UserInput!): User!
  deleteUser(userId: Float!): UserMessage!
  updateBatterEntry(data: BatterUpdateInput!): BatterEntry!
  updateScorecard(data: ScorecardInput!): Scorecard!
}

type OffenseEntry {
  batterId: Float!
  id: Float!
  inning: Float!
  result: String!
}

type PitcherEntry {
  bb: Float!
  bk: Float!
  earnedRuns: Float!
  firstName: String!
  hb: Float!
  hits: Float!
  id: Float!
  ip: Float!
  lastName: String!
  playerNumber: Float!
  runs: Float!
  scorecardId: Float!
  so: Float!
  tbf: Float!
  team: String!
  wls: Float!
}

type Profile {
  id: Float!
  user: User!
  userId: Float!
}

type Query {
  getBatterEntries(scorecardId: Float!): [BatterEntry!]!
  getBatterEntry(id: Float!): BatterEntry!
  getProfile(userId: Float!): Profile!
  getScorecard(id: Float!): Scorecard!
  getScorecards(userId: Float!): [Scorecard!]!
  getUser(id: Float!): User!
  getUsers: [User!]!
}

type Scorecard {
  batterEntries: [BatterEntry!]!
  catcherEntries: [CatcherEntry!]!
  date: DateTime!
  endTime: String!
  gameTime: String!
  home: String!
  id: Float!
  notes: String!
  pitcherEntries: [PitcherEntry!]!
  public: Boolean!
  startTime: String!
  sumEntries: [SumsEntry!]!
  title: String!
  umpireEntries: [UmpireEntry!]!
  userId: Float!
  visitor: String!
  weather: String!
}

input ScorecardInput {
  date: DateTime
  endTime: String
  gameTime: String
  home: String
  id: Float!
  notes: String
  public: Boolean = true
  startTime: String
  title: String
  userId: Float!
  visitor: String
  weather: String
}

type SumsEntry {
  errors: Float!
  hits: Float!
  id: Float!
  inning: Float!
  leftOnBase: Float!
  runs: Float!
  scorecardId: Float!
  team: String!
}

type UmpireEntry {
  id: Float!
  name: String!
  position: String!
  scorecardId: Float!
}

type User {
  createdAt: DateTime!
  email: String!
  id: Float!
  password: String!
  role: String!
  scorecards: [Scorecard!]!
  username: String!
}

input UserInput {
  email: String!
  password: String!
  role: String = "USER"
  username: String!
}

type UserMessage {
  message: String!
}
