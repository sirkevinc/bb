// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id              Int       @id @default(autoincrement())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  username        String    @unique
  email           String    @unique
  password        String    @db.VarChar(255)
  scorecards      Scorecard[]
  profile         Profile?
  role            Role      @default(USER)
}

model Profile {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int

}

model Scorecard {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  public          Boolean   @default(true)
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
  title           String?
  visitor         String?
  home            String?
  date            DateTime?
  startTime       String?
  endTime         String?
  weather         String?
  gameTime        String?
  notes           String?
  batterEntries   BatterEntry[]
  pitcherEntries  PitcherEntry[]
  sumsEntries     SumsEntry[]
  umpireEntries   UmpireEntry[]
  catcherEntries  CatcherEntry[]
}

model BatterEntry {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  scorecard       Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId     Int
  team            String
  playerNumber    Int
  firstName       String
  lastName        String
  position        String
  atBats          Int
  runs            Int
  hits            Int
  rbis            Int
  offenseEntries  OffenseEntry[]
}

model OffenseEntry {
  id              Int         @default(autoincrement()) @id
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  batter          BatterEntry @relation(fields: [batterId], references: [id])
  batterId        Int
  inning          Int
  result          String
}

model PitcherEntry {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  playerNumber    Int
  firstName       String
  lastName        String
  team            String
  wls             Int
  ip              Int
  hits            Int
  runs            Int
  earnedRuns      Int
  bb              Int
  so              Int
  hb              Int
  bk              Int
  tbf             Int
  scorecard       Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId     Int
}

model CatcherEntry {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  playerNumber    Int
  firstName       String
  lastName        String
  team            String
  pb              Int
  scorecard       Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId     Int
}

model SumsEntry {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  runs            Int
  hits            Int
  errors          Int
  leftOnBase      Int
  inning          Int
  team            String
  scorecard       Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId     Int
}

model UmpireEntry {
  id              Int       @default(autoincrement()) @id
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String
  position        String
  scorecard       Scorecard @relation(fields: [scorecardId], references: [id])
  scorecardId     Int
}

enum Role {
  USER
  ADMIN
}